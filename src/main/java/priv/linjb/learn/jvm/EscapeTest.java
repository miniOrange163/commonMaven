package priv.linjb.learn.jvm;

import java.util.ArrayList;
import java.util.function.Consumer;

/**
 * @author: 林嘉宝
 *  
 * @Date: 2018/9/26
 *  
 * @name: 示例 - 逃逸分析
 *
 * @Description: Run with : -XX:+PrintGCDetails -XX:-DoEscapeAnalysis
 *              PrintGC：打印GC情况
 *              PrintGCDetails：打印GC详细情况
 *              DoEscapeAnalysis：逃逸分析的开关
 *
 *              测试情况：
 *              1.若关闭逃逸分析，程序运行时间在8秒左右
 *              2.若打开逃逸分析，程序运行时间在2秒左右
 *
 *              结论：
 *              1.逃逸分析的开关，对程序性能的影响非常大。
 *              2.若关闭逃逸分析，会导致年轻代频繁GC,致使程序运行时间大增
 */
public class EscapeTest {


    public static void forEach(ArrayList<Object> list, Consumer<Object> f) {
        for (Object obj : list) {
            f.accept(obj);

        }

      /* // 若用此段代码进行遍历，即使关闭了逃逸分析，程序的运行效率与未关闭逃逸分析相比，并没有太大差异
       for (int i = 0; i < list.size(); i++) {
            f.accept(list.get(i));
        }
*/
    }

    public static void main(String[] args) {

        long start = System.currentTimeMillis();


        ArrayList<Object> list = new ArrayList<>();
        for (int i = 0; i < 100; i++) {
            list.add(i);

        }
        for (int i = 0; i < 400_000_000; i++) {
            forEach(list,obj->{});
        }

        long end = System.currentTimeMillis();
        double length = (end - start) / (double)1000;
        System.out.println("调用时长:" + length + "秒");
    }

}

/*
  jstat 打印的GC情况 ：
  S0     S1     E      O      M     CCS    YGC     YGCT    FGC    FGCT     GCT
  0.00   0.00  12.69   0.00  17.43  19.76      0    0.000     0    0.000    0.000
  0.00   0.00  12.69   0.00  17.43  19.76      0    0.000     0    0.000    0.000
  0.00   0.00  12.69   0.00  17.43  19.76      0    0.000     0    0.000    0.000
  0.00   0.00  12.69   0.00  17.43  19.76      0    0.000     0    0.000    0.000
 75.52   0.00  23.94   0.02  85.41  73.43      6    0.010     0    0.000    0.010
  0.00   0.00  33.99   0.66  85.41  73.43     11    0.014     0    0.000    0.014
  0.00   0.00  24.00   0.66  85.41  73.43     16    0.017     0    0.000    0.017
  0.00   0.00  78.00   0.66  85.41  73.43     21    0.021     0    0.000    0.021
  0.00   0.00  42.00   0.66  85.41  73.43     28    0.027     0    0.000    0.027
  0.00   0.00  12.00   0.66  85.41  73.43     36    0.033     0    0.000    0.033
  0.00   0.00  34.00   0.66  85.41  73.43     45    0.040     0    0.000    0.040
  0.00   0.00  34.00   0.66  85.41  73.43     57    0.049     0    0.000    0.049
  0.00   0.00   6.00   0.66  85.41  73.43     68    0.058     0    0.000    0.058
  0.00   0.00  32.00   0.66  85.41  73.43     79    0.067     0    0.000    0.067
  0.00   0.00  10.00   0.66  85.41  73.43     91    0.077     0    0.000    0.077
  0.00   0.00  28.00   0.66  85.41  73.43    100    0.083     0    0.000    0.083
  0.00   0.00  12.00   0.66  85.41  73.43    111    0.092     0    0.000    0.092
  0.00   0.00  74.00   0.66  85.41  73.43    123    0.101     0    0.000    0.101
  0.00   0.00  72.00   0.66  85.41  73.43    134    0.110     0    0.000    0.110
  0.00   0.00  68.00   0.66  85.41  73.43    146    0.120     0    0.000    0.120
  0.00   0.00  42.00   0.66  85.41  73.43    159    0.129     0    0.000    0.129
  0.00   0.00  30.00   0.66  85.41  73.43    170    0.139     0    0.000    0.139
  0.00   0.00  74.00   0.66  85.41  73.43    178    0.145     0    0.000    0.145
  0.00   0.00  62.00   0.66  85.41  73.43    188    0.153     0    0.000    0.153
  0.00   0.00  46.00   0.66  85.41  73.43    199    0.162     0    0.000    0.162
  0.00   0.00  90.00   0.66  85.41  73.43    207    0.167     0    0.000    0.167

*/
